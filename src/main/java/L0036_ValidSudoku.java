// https://leetcode.cn/problems/valid-sudoku/
// 36. 有效的数独
// 难度：中等

// 请你判断一个 9 x 9 的数独是否有效。只需要 根据以下规则 ，验证已经填入的数字是否有效即可。
// 1. 数字 1-9 在每一行只能出现一次。
// 2. 数字 1-9 在每一列只能出现一次。 
// 3. 数字 1-9 在每一个以粗实线分隔的 3x3 宫内只能出现一次。

// 注意：
// - 一个有效的数独（部分已被填充）不一定是可解的。
// - 只需要根据以上规则，验证已经填入的数字是否有效即可。
// - 空白格用 '.' 表示。

// 示例 1：
// 输入：board = 
// [["5","3",".",".","7",".",".",".","."]
// ,["6",".",".","1","9","5",".",".","."]
// ,[".","9","8",".",".",".",".","6","."]
// ,["8",".",".",".",".","6",".",".","."]
// ,["4",".",".","8",".","3",".",".","1"]
// ,["7",".",".",".","2",".",".",".","6"]
// ,[".","6",".",".",".",".","2","8","."]
// ,[".",".",".","4","1","9",".",".","5"]
// ,[".",".",".",".","8",".",".","7","9"]]
// 输出：true

// 示例 2：
// 输入：board = 
// [["8","3",".",".","7",".",".",".","."]
// ,["6",".",".","1","9","5",".",".","."]
// ,[".","9","8",".",".",".",".","6","."]
// ,["8",".",".",".",".","6",".",".","."]
// ,["4",".",".","8",".","3",".",".","1"]
// ,["7",".",".",".","2",".",".",".","6"]
// ,[".","6",".",".",".",".","2","8","."]
// ,[".",".",".","4","1","9",".",".","5"]
// ,[".",".",".",".","8",".",".","7","9"]]
// 输出：false
// 解释：除了第一行的第一个数字从 5 改为 8 以外，空格内其他数字均与 示例1 相同。 
// 但由于位于左上角的 3x3 宫内有两个 8 存在, 因此这个数独是无效的。

// 提示：
// - board.length == 9
// - board[i].length == 9
// - board[i][j] 是一位数字（1-9）或者 '.'

public class L0036_ValidSudoku {
    public boolean isValidSudoku(char[][] board) {
        // 使用三个二维数组分别记录行、列、3x3宫格中数字出现的情况
        boolean[][] rows = new boolean[9][9];
        boolean[][] cols = new boolean[9][9];
        boolean[][] boxes = new boolean[9][9];
        
        // 遍历整个数独
        for (int i = 0; i < 9; i++) {
            for (int j = 0; j < 9; j++) {
                // 跳过空格
                if (board[i][j] == '.') {
                    continue;
                }
                
                // 将字符转换为数字(0-8)
                int num = board[i][j] - '1';
                
                // 计算当前格子所在的3x3宫格的索引
                int boxIndex = (i / 3) * 3 + j / 3;
                
                // 检查当前数字是否已经在对应的行、列或3x3宫格中出现过
                if (rows[i][num] || cols[j][num] || boxes[boxIndex][num]) {
                    return false;
                }
                
                // 标记当前数字在对应的行、列和3x3宫格中已经出现
                rows[i][num] = true;
                cols[j][num] = true;
                boxes[boxIndex][num] = true;
            }
        }
        
        return true;
    }

    public static void main(String[] args) {
        L0036_ValidSudoku solution = new L0036_ValidSudoku();
        
        // 测试用例1
        char[][] board1 = {
            {'5','3','.','.','7','.','.','.','.'},
            {'6','.','.','1','9','5','.','.','.'},
            {'.','9','8','.','.','.','.','6','.'},
            {'8','.','.','.','.','6','.','.','.'},
            {'4','.','.','8','.','3','.','.','1'},
            {'7','.','.','.','2','.','.','.','6'},
            {'.','6','.','.','.','.','2','8','.'},
            {'.','.','.','4','1','9','.','.','5'},
            {'.','.','.','.','8','.','.','7','9'}
        };
        System.out.println("Test Case 1: " + solution.isValidSudoku(board1)); // 应输出 true
        
        // 测试用例2
        char[][] board2 = {
            {'8','3','.','.','7','.','.','.','.'},
            {'6','.','.','1','9','5','.','.','.'},
            {'.','9','8','.','.','.','.','6','.'},
            {'8','.','.','.','.','6','.','.','.'},
            {'4','.','.','8','.','3','.','.','1'},
            {'7','.','.','.','2','.','.','.','6'},
            {'.','6','.','.','.','.','2','8','.'},
            {'.','.','.','4','1','9','.','.','5'},
            {'.','.','.','.','8','.','.','7','9'}
        };
        System.out.println("Test Case 2: " + solution.isValidSudoku(board2)); // 应输出 false
    }
} 